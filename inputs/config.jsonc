{   
    // submit_job: bool, Specifies if run should be submitted to SLURM (True) or run a login node (False)
    "submit_job": false, 
    
    // L1C: bool, Specifies whether Level 1C data should be processed
    "L1C": true,

    // L2: bool, Specifies whether Level 2 data should be processed
    "L2": true,

    // process: bool, Specifies whether Level 1C and Level 2 data should be correlated for filtering spectra
    "process": true,

    // channels: str, Specifies which mode of selection for IASI spectral channels
    "channels_mode": "all_reduced",

    // products: str, string containing desired IASI L2 products, separated by comma only (e.g. "clp,ozo,twt")
    "products": "clp",

    // satellite_identifier: str, The IASI satellite to be analysed (A, B, or C) = "metopa" | "metopb" | "metopc"
    "satellite_identifier": "metopb",
    
    // quality_flags: str, Three Yes/No flags describing three levels of quality of the IASI data ("yyy" = only good data, "nnn" = all data)
    "quality_flags": "yyy",

    // datapath: str, The user-defined data path for the processed output files
    "datapath": "/data/pdonnelly/iasi/",

    // delete_intermediate_files: bool, Specifies whether intermediate OBR files and files from Preprocessor should be deleted (leaving only the final merged dataset)
    "delete_intermediate_files": false,

    // year_list: List[int], List of years for extraction
    "year_list": [2018],

    // month_list:  List[int] or str, List[int] of specific months or "all" to scan all calendar months in year
    "month_list": [3],

    // day_list: List[int] or str, List[int] of specific days, or "all" to scan all calendar days in month
    "day_list": [1],

    // months_in_year: List[int], Calendar months in each year
    "months_in_year": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],

    // days_in_months: List[int], Number of calendar days in each month
    "days_in_months": [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],

    // latitude_range: List[int], The spatial range for binning latitudes [min, max]
    "latitude_range": [30, 60],

    // longitude_range: List[int], The spatial range for binning longitudes [min, max]
    "longitude_range": [-60, 0]
}
